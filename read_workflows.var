
function initiate_procedure_read(){

# Start of the main loop structure
	while [ 1 ]; do
	clear	
	say_hello || echo "no loadada"
        declare -a submenuarray

        # initialising variables

	UNIVERSITYREAD="University"
	LIBRARYBROWSE="Browse our Library"
	LIBRARYSPECIFIC="Specific set of Books"
        READINGFORFUN="Reading for Fun"
        NOTES="Read & Note"        
        EMAIL="Check my Emails"
        NEWSLETTERS="Check my Newsletters"
        NEWS="Skim News"
	ANKI="Review Anki"
	
        # Initialising array
        submenuarray[0]="${UNIVERSITYREAD}"
        submenuarray[1]="${LIBRARYBROWSE}"
        submenuarray[2]="${LIBRARYSPECIFIC}"
        submenuarray[3]="${READINGFORFUN}"
        submenuarray[4]="${NOTES}"     	        
        submenuarray[5]="${EMAIL}"
        submenuarray[6]="${NEWSLETTERS}"
        submenuarray[7]="${NEWS}"
	submenuarray[8]="${ANKI}"
	        
        count="${#submenuarray[*]}"

#       return-clause
        RETURNCLAUSE="${count}"
        submenuarray["${RETURNCLAUSE}"]="${RETURNTEXT:-Return}"
        count="$(( count + 1 ))"

	echo " - LAST PICKED: ${LASTPICKED}"
	echo " - OPTIONS: "

        if [ -n "${READDURATION}" ]; then
                echo " - Duration: ${topic} for ${READDURATION} seconds"
                unset LISTENDURATION
        fi


                for (( i=0; i<${count}; i++ )); do
                        echo " -- ${i}. ${submenuarray[${i}]}"
                done

                while [ 1 ]; do
                        echo -e "\n - So, whadaya doin' ?"
                        read -p " -- Choice: " choice

                        if [[ -n "${choice}" ]] && [[ "${choice}" -lt "${count}" ]]; then
                                break
                        fi

                        echo " -- ${choice} is invalid ${failStr}"

                done
#               end of echo-loop

        topic="${submenuarray[${choice}]}"

        case $topic in
	        "${UNIVERSITYREAD}")
                        inform_subtopic "$topic"
			start_procedure_university
                ;;
	        "${LIBRARYBROWSE}"|"${READINGFORFUN}")
                        inform_subtopic "$topic"
			start_subprocedure_calibre
                ;;
		"${LIBRARYSPECIFIC}")
                        inform_subtopic "$topic"
			start_subprocedure_WIP
                ;;             	        
	        "${NOTES}")
                        inform_subtopic "$topic"
			start_subprocedure_calibre
                ;;             	        
	        "${EMAIL}")
                        inform_subtopic "$topic"
			start_subprocedure_WIP
                ;;
		"${NEWSLETTERS}")
                        inform_subtopic "$topic"
			start_subprocedure_WIP
                ;;
	        "${NEWS}")
                        inform_subtopic "$topic"
			start_subprocedure_WIP
                ;;
	        "${ANKI}")
                        inform_subtopic "$topic"
			start_subprocedure_WIP
                ;;
		"${RETURNTEXT}")
      			echo " - Returning..."
        		unset submenuarray
			unset count
			unset choice
			unset RETURNCLAUSE
        		return 0
		;;
                *)
                        echo "$topic is invalid"
                ;;
        esac

        unset submenuarray

        done
#       end of main loop
	
	return 0
}


function start_subprocedure_calibre(){
	READSTART="$SECONDS"
	calibre
	READEND="$SECONDS"

	READDURATION="$((READEND - READSTART))"
	
	unset READSTART
	unset READEND

	return 0
}
